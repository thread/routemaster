<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <style>
    body {
      font-size: 14px;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
      margin: 0;
    }
    #graph-container {
      height: 100%;
      width: 100%;
      position: absolute;
      left: 0;
      top: 3.5em;
    }
    #controls {
      background-color: #f0f0f0;
      margin: 0;
    }
    #controls div {
      display: inline-block;
      padding: 0.5em;
      margin-right: 0.2em;
    }
    .range-input-container {
      top: 0.5em;
      position: relative;
    }
    .muted {
      color: #666666;
    }
    .action {
      background-color: orange;
    }
    .gate {
      background-color: lightBlue;
    }
  </style>
  <title>Visualisation of state machine {{ state_machine_name }}</title>
</head>
<body>
  <script type="application/json" id="state-machine-config">
    {{ state_machine_config|tojson }}
  </script>
  <script
    src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.21.0/cytoscape.min.js"
    integrity="sha512-6NNH8uUbdENB10r5FH/4DZviHTQ44GtZ+c+fwSiWM4GekjajHkYanpH0+jWt3meFll/HHWAcxKLcMpSAXuT/Dg=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  ></script>
  <div id="controls">
    <div id="legend">
      <div class="action">action</div>
      <div class="gate">gate</div>
    </div>
    <div>
      <label>
        Spacing:
        <span class="range-input-container">
          <input id="spacing-factor" type="range" min="1" max="50" step="0.1">
        </span>
        <span id="spacing-factor-display"></span>
      </label>
    </div>
    <div class="muted">Click and drag to move the graph; scroll to zoom</div>
  </div>
  <div id="graph-container"></div>
  <script>
    function backgroundColourForNodeClass(nodeClass) {
      var style = getComputedStyle(document.querySelector('#legend ' + nodeClass));
      return style.backgroundColor;
    }

    var layoutOptions = {
      // http://js.cytoscape.org/#layouts/breadthfirst
      name: 'breadthfirst',
      fit: true,
      directed: true,
      padding: 30,
      spacingFactor: 1.35,
      avoidOverlap: false,
      nodeDimensionsIncludeLabels: false,
      maximalAdjustments: 1,
    };

    function precisionRound(number, precision) {
      var factor = Math.pow(10, precision);
      return Math.round(number * factor) / factor;
    }

    function displaySpacingFactor() {
      document.getElementById('spacing-factor-display').innerHTML = precisionRound(layoutOptions.spacingFactor * 10, 1);
    }

    function parseConfig(elementId) {
      return JSON.parse(document.getElementById(elementId).innerHTML);
    }

    var cy = cytoscape({
      container: document.getElementById('graph-container'),

      boxSelectionEnabled: false,
      autounselectify: true,
      wheelSensitivity: 0.1,

      style: cytoscape.stylesheet()
        .selector()
          .css({
            'font-family': getComputedStyle(document.body).fontFamily,
          })
        .selector('node')
          .css({
            'content': 'data(id)',
            'text-valign': 'center',
            'color': 'black',
          })
          .style({
            'shape': 'square',
            'width': 'label',
            'height': 'label',
            'padding': '1em',
          })
        .selector('edge')
          .css({
            'curve-style': 'bezier',
            'target-arrow-shape': 'triangle',
            'target-arrow-color': '#ccc',
            'line-color': '#ccc',
            'width': 1
          })
        .selector(':selected')
          .css({
            'background-color': 'black',
            'line-color': 'black',
            'target-arrow-color': 'black',
            'source-arrow-color': 'black'
          })
        .selector('.action')
          .css({
            'background-color': backgroundColourForNodeClass('.action'),
          })
        .selector('.gate')
          .css({
            'background-color': backgroundColourForNodeClass('.gate'),
          }),

      elements: parseConfig('state-machine-config'),

      layout: layoutOptions
    });

    function changeSpacing(value) {
      layoutOptions.spacingFactor = value;
      displaySpacingFactor();
      cy.layout(layoutOptions).run();
    }

    var initialSpacingFactor = 0.4 + cy.nodes().length * 0.04;
    var spacingFactorElem = document.getElementById('spacing-factor');
    spacingFactorElem.addEventListener('change', function() {
        changeSpacing(spacingFactorElem.value / 10);
    })
    spacingFactorElem.value = initialSpacingFactor * 10;
    changeSpacing(initialSpacingFactor);
  </script>
</body>
</html>
