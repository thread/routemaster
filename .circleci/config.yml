version: 2

jobs:
  test-36: &test-template
    working_directory: ~/routemaster
    docker:
      # First container is where our steps run.
      - image: circleci/python:3.6.3
        environment:
          - PG_HOST=localhost
          - PG_PORT=5432
          - PG_DB=routemaster
          - PG_USER=routemaster
          - PG_PASS=routemaster
          - TOXENV=py36
          - COVERALLS=true

      # Ancilliary containers
      - image: postgres:9.6
        environment:
          - POSTGRES_USER=routemaster
          - POSTGRES_DB=routemaster
          - POSTGRES_PASSWORD=routemaster

    steps:
      - checkout

        # Set up a cached virtualenv in which to install tox
      - restore_cache:
          name: Restore build dependency cache
          key: deps-venv-{{ .Branch }}-{{ .Environment.CIRCLE_STAGE }}-{{ checksum "scripts/testing/requirements-ci.txt" }}
      - run:
          name: Install tox
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r scripts/testing/requirements-ci.txt
      - save_cache:
          name: Save build dependency cache
          key: deps-venv-{{ .Branch }}-{{ .Environment.CIRCLE_STAGE }}-{{ checksum "scripts/testing/requirements-ci.txt" }}
          paths:
            - "venv"

      - run:
          name: Wait for Database with Dockerize
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Run tox, caching the .tox directory
      - run:
          name: Build combined checksum file
          command: |
            rm .checksum
            for file in tox.ini setup.py scripts/linting/requirements.txt scripts/typechecking/requirements.txt scripts/testing/requirements.txt
            do
              echo $file >> .checksum
              cat $file >> .checksum
            done
      - restore_cache:
          name: Restore .tox cache
          key: deps-tox-{{ .Branch }}-{{ .Environment.CIRCLE_STAGE }}-{{ checksum ".checksum" }}
      - run:
          name: Test
          command: |
            . venv/bin/activate
            tox
      - save_cache:
          name: Save .tox cache
          key: deps-tox-{{ .Branch }}-{{ .Environment.CIRCLE_STAGE }}-{{ checksum ".checksum" }}
          paths:
            - ".tox"

      # Testing done, store results
      - store_test_results:
          path: build/results
      - store_artifacts:
          path: build/artifacts/coverage
          destination: coverage
      - run:
          name: Report coverage (if enabled for this job)
          command: |
            if [ "$COVERALLS" != "true" ]; then exit 0; fi
            . venv/bin/activate
            coveralls

  test-37:
    <<: *test-template
    environment:
        TOXENV: py37
        COVERALLS: false
    docker:
      - image: circleci/python:3.7

  test-38:
    <<: *test-template
    environment:
        TOXENV: py38
        COVERALLS: false
    docker:
      - image: circleci/python:3.8

  lint:
    working_directory: ~/routemaster
    docker:
      - image: circleci/python:3.6.3
    steps:
      - checkout
      - restore_cache:
          name: Restore build dependency cache
          key: deps-venv-18.0-2.9.1
      - run:
          name: Install tox
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install pip==18.0
            pip install tox==2.9.1
      - save_cache:
          name: Save build dependency cache
          key: deps-venv-18.0-2.9.1
          paths:
            - "venv"
      - restore_cache:
          name: Restore .tox cache
          key: deps-tox-{{ checksum "scripts/linting/requirements.txt" }}
      - run:
          name: Lint
          command: |
            . venv/bin/activate
            TOXENV=lint tox
      - save_cache:
          name: Save .tox cache
          key: deps-tox-{{ checksum "scripts/linting/requirements.txt" }}
          paths:
            - ".tox"
      - store_test_results:
          path: build/results

  typecheck:
    working_directory: ~/routemaster
    docker:
      - image: circleci/python:3.6.3
    steps:
      - checkout
      - restore_cache:
          name: Restore build dependency cache
          key: deps-venv-18.0-2.9.1
      - run:
          name: Install tox
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install pip==18.0
            pip install tox==2.9.1
      - save_cache:
          name: Save build dependency cache
          key: deps-venv-18.0-2.9.1
          paths:
            - "venv"
      - restore_cache:
          name: Restore .tox cache
          key: deps-tox-{{ checksum "scripts/typechecking/requirements.txt" }}
      - run:
          name: Typecheck
          command: |
            . venv/bin/activate
            TOXENV=mypy tox
      - save_cache:
          name: Save .tox cache
          key: deps-tox-{{ checksum "scripts/typechecking/requirements.txt" }}
          paths:
            - ".tox"
      - store_test_results:
          path: build/results

  release:
    working_directory: ~/routemaster
    docker:
      - image: circleci/python:3.6.3
    steps:
      - checkout

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: PyPI Upload
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install pip==18.0
            pip install twine>=1.11.0
            pip install wheel>=0.31.0

            python setup.py sdist
            python setup.py bdist_wheel
            twine upload dist/*

            cd plugins/routemaster-sentry
            python setup.py sdist
            python setup.py bdist_wheel
            twine upload dist/*

            cd ../..

            cd plugins/routemaster-prometheus
            python setup.py sdist
            python setup.py bdist_wheel
            twine upload dist/*

      - setup_remote_docker

      - run:
          name: Build Docker thread/routemaster image
          command: docker build -t routemaster .

      - run:
          name: Push Docker image
          command: |
            docker tag routemaster thread/routemaster:latest
            docker tag routemaster thread/routemaster:$CIRCLE_TAG

            docker login -u $DOCKER_USER -p $DOCKER_PASS

            docker push thread/routemaster:latest
            docker push thread/routemaster:$CIRCLE_TAG


workflows:
  version: 2
  build-release:
    jobs:
      - test-36:
          filters:
            tags:
              only: /.*/
      - test-37:
          filters:
            tags:
              only: /.*/
      - test-38:
          filters:
            tags:
              only: /.*/
      - lint:
          filters:
            tags:
              only: /.*/
      - typecheck:
          filters:
            tags:
              only: /.*/
      - release:
          requires:
            - test-36
            - test-37
            - test-38
            - lint
            - typecheck
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
